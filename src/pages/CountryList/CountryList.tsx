import { Section, Cell, List, Spinner } from '@telegram-apps/telegram-ui';
import { FC, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Page } from '@/components/Page';
import { api, type Package } from '@/services/api';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Country {
  id: string;
  name: string;
  flag: string;
  plansCount: number;
  startingPrice: number;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É
const getCountryName = (code: string): string => {
  const countryNames: Record<string, string> = {
    KW: '–ö—É–≤–µ–π—Ç',
    KR: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è',
    KZ: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    JE: '–î–∂–µ—Ä—Å–∏',
    KG: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω',
    QA: '–ö–∞—Ç–∞—Ä',
    UZ: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    AM: '–ê—Ä–º–µ–Ω–∏—è',
    KH: '–ö–∞–º–±–æ–¥–∂–∞',
    CA: '–ö–∞–Ω–∞–¥–∞',
    DO: '–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞',
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };
  return countryNames[code] || code;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
const parseLocationToCountry = (packages: Package[]): Country[] => {
  const countryMap = new Map<string, Country>();

  packages.forEach(pkg => {
    pkg.location.forEach((locationCode: string) => {
      const countryCode = locationCode.trim();
      if (!countryCode) return;

      if (!countryMap.has(countryCode)) {
        countryMap.set(countryCode, {
          id: countryCode,
          name: getCountryName(countryCode),
          flag: getFlagEmoji(countryCode),
          plansCount: 1,
          startingPrice: pkg.price
        });
      } else {
        const country = countryMap.get(countryCode)!;
        country.plansCount++;
        country.startingPrice = Math.min(country.startingPrice, pkg.price);
      }
    });
  });

  return Array.from(countryMap.values())
    .sort((a, b) => a.name.localeCompare(b.name));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
const getFlagEmoji = (countryCode: string): string => {
  if (countryCode.length !== 2) return 'üåç';
  
  const OFFSET = 127397;
  const chars = countryCode
    .toUpperCase()
    .split('')
    .map(char => char.charCodeAt(0) + OFFSET);
  
  return String.fromCodePoint(...chars);
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
const formatPrice = (price: number): string => {
  return `$${price.toFixed(2)}`;
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
const formatPlansCount = (count: number): string => {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;

  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return `${count} —Ç–∞—Ä–∏—Ñ–æ–≤`;
  }

  switch (lastDigit) {
    case 1:
      return `${count} —Ç–∞—Ä–∏—Ñ`;
    case 2:
    case 3:
    case 4:
      return `${count} —Ç–∞—Ä–∏—Ñ–∞`;
    default:
      return `${count} —Ç–∞—Ä–∏—Ñ–æ–≤`;
  }
};

export const CountryList: FC = () => {
  const navigate = useNavigate();
  const [countries, setCountries] = useState<Country[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadCountries = async () => {
      try {
        setLoading(true);
        const packages = await api.getPackages();
        const countriesList = parseLocationToCountry(packages);
        setCountries(countriesList);
        setError(null);
      } catch (err) {
        console.error('Failed to load countries:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setLoading(false);
      }
    };

    loadCountries();
  }, []);

  if (loading) {
    return (
      <Page>
        <div style={{ display: 'flex', justifyContent: 'center', padding: '20px' }}>
          <Spinner size="m" />
        </div>
      </Page>
    );
  }

  if (error) {
    return (
      <Page>
        <Section header="–û—à–∏–±–∫–∞">
          <Cell>{error}</Cell>
        </Section>
      </Page>
    );
  }

  if (countries.length === 0) {
    return (
      <Page>
        <Section header="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö">
          <Cell>–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</Cell>
        </Section>
      </Page>
    );
  }

  return (
    <Page back={false}>
      <List>
        <Section
          header="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã"
          footer="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö eSIM —Ç–∞—Ä–∏—Ñ–æ–≤"
        >
          {countries.map((country) => (
            <Cell
              key={country.id}
              onClick={() => navigate(`/country/${country.id}`)}
              before={<span style={{ fontSize: '24px' }}>{country.flag}</span>}
              subtitle={`–û—Ç ${formatPrice(country.startingPrice)} ‚Ä¢ ${formatPlansCount(country.plansCount)}`}
              multiline
            >
              {country.name}
            </Cell>
          ))}
        </Section>
      </List>
    </Page>
  );
};