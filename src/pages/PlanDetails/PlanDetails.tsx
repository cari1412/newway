import { Section, Cell, List, Button, Spinner } from '@telegram-apps/telegram-ui';
import { FC, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Page } from '@/components/Page';
import { api, type Package } from '@/services/api';
import { formatPrice, getFlagEmoji, getNetworkTypeIcon } from '@/utils/formats';

export const PlanDetails: FC = () => {
  const { planId } = useParams();
  const [plan, setPlan] = useState<Package | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [processing, setProcessing] = useState(false);

  useEffect(() => {
    const loadPlan = async () => {
      if (!planId) return;

      try {
        const packages = await api.getPackages();
        const matchingPlan = packages.find((p: Package) => p.id === planId);
        
        if (matchingPlan) {
          setPlan(matchingPlan);
        } else {
          setError('–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        console.error('Failed to load plan:', err);
      } finally {
        setLoading(false);
      }
    };

    loadPlan();
  }, [planId]);

  const handlePurchase = async () => {
    if (!plan) return;
    setProcessing(true);
    
    try {
      const transactionId = `purchase-${Date.now()}`;
      await api.createOrder(transactionId, [{
        packageCode: plan.id,
        count: 1,
        price: plan.retailPrice // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∏–∑ –ø–ª–∞–Ω–∞
      }]);
      alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    } catch (err) {
      console.error('Purchase failed:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setProcessing(false);
    }
  };

  if (loading) {
    return (
      <Page>
        <div style={{ display: 'flex', justifyContent: 'center', padding: '20px' }}>
          <Spinner size="m" />
        </div>
      </Page>
    );
  }

  if (error || !plan) {
    return (
      <Page>
        <Section header="–û—à–∏–±–∫–∞">
          <Cell>{error || '–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}</Cell>
        </Section>
      </Page>
    );
  }

  const countryFlag = getFlagEmoji(plan.location[0]);
  const features = plan.features || [];
  const networkTypes = features
    .filter(f => f.toLowerCase().includes('g'))
    .join('/');

  return (
    <Page>
      <List>
        <Section>
          <Cell
            before={<span style={{ fontSize: '24px' }}>{countryFlag}</span>}
            after={formatPrice(plan.retailPrice)}
            subtitle={`${plan.data} ‚Ä¢ ${plan.validity}`}
          >
            {plan.name}
          </Cell>
        </Section>

        <Section header="–û–ø–∏—Å–∞–Ω–∏–µ">
          <Cell multiline>{plan.description}</Cell>
        </Section>

        <Section header="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏">
          {features.length > 0 && (
            <Cell
              before={<span style={{ fontSize: '20px' }}>üåê</span>}
              subtitle="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–µ–π"
              multiline
            >
              {networkTypes}
            </Cell>
          )}
          {features.map((feature: string, index: number) => (
            <Cell
              key={index}
              before={<span style={{ fontSize: '20px' }}>{getNetworkTypeIcon(feature)}</span>}
              multiline
            >
              {feature}
            </Cell>
          ))}
        </Section>

        <Section header="–ó–æ–Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏—è">
          {plan.location.map((countryCode: string, index: number) => (
            <Cell 
              key={index}
              before={<span style={{ fontSize: '20px' }}>{getFlagEmoji(countryCode)}</span>}
            >
              {countryCode}
            </Cell>
          ))}
        </Section>

        <Section header="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ">
          <Cell before="1Ô∏è‚É£">–û–ø–ª–∞—Ç–∏—Ç–µ eSIM</Cell>
          <Cell before="2Ô∏è‚É£">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥</Cell>
          <Cell before="3Ô∏è‚É£">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å eSIM</Cell>
          <Cell before="4Ô∏è‚É£">–í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö</Cell>
          <Cell before="5Ô∏è‚É£">–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</Cell>
        </Section>

        <Section>
          <Cell>
            <div style={{ padding: '8px 0' }}>
              <Button 
                size="l" 
                stretched 
                onClick={handlePurchase}
                disabled={processing}
              >
                {processing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : `–ö—É–ø–∏—Ç—å –∑–∞ ${formatPrice(plan.retailPrice)}`}
              </Button>
            </div>
          </Cell>
        </Section>
      </List>
    </Page>
  );
};