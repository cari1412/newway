// –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
export const formatPrice = (price: number): string => {
  if (!price) return '$0.00';
  const priceInDollars = price / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–ª–∞—Ä—ã
  return `$${priceInDollars.toFixed(2)}`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
export const formatDataVolume = (dataStr: string): string => {
  return dataStr; // –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XX.X GB"
};

// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
export const formatDataSize = (gb: number): string => {
  if (gb >= 1024) {
    return `${(gb / 1024).toFixed(1)} TB`;
  }
  if (gb >= 1) {
    return `${gb} GB`;
  }
  return `${(gb * 1024).toFixed(0)} MB`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
export const formatValidity = (validity: string): string => {
  const [duration, unit] = validity.split(' ');
  const unitFormatted = unit === 'day' ? '–¥–Ω–µ–π' : unit;
  return `${duration} ${unitFormatted}`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–æ–≤
export const formatPlansCount = (count: number): string => {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;

  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return `${count} —Ç–∞—Ä–∏—Ñ–æ–≤`;
  }

  switch (lastDigit) {
    case 1:
      return `${count} —Ç–∞—Ä–∏—Ñ`;
    case 2:
    case 3:
    case 4:
      return `${count} —Ç–∞—Ä–∏—Ñ–∞`;
    default:
      return `${count} —Ç–∞—Ä–∏—Ñ–æ–≤`;
  }
};

// –†–∞–±–æ—Ç–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
export const getFlagEmoji = (countryCode: string): string => {
  if (countryCode.length !== 2) return 'üåç';
  const OFFSET = 127397;
  const chars = countryCode
    .toUpperCase()
    .split('')
    .map(char => char.charCodeAt(0) + OFFSET);
  return String.fromCodePoint(...chars);
};

export const getNetworkTypeIcon = (type: string): string => {
  switch (type.toLowerCase()) {
    case '5g':
      return 'üì∂';
    case '4g':
    case 'lte':
      return 'üì°';
    case '3g':
      return 'üì±';
    default:
      return 'üåê';
  }
};

// –†–∞–±–æ—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏
export const calculateDiscount = (originalPrice: number, discountedPrice: number): number => {
  return Math.round(((originalPrice - discountedPrice) / originalPrice) * 100);
};

export const formatDiscount = (discount: number): string => {
  return `-${discount}%`;
};

export const getPriceRange = (prices: number[]): string => {
  const min = Math.min(...prices);
  const max = Math.max(...prices);
  return min === max ? formatPrice(min) : `–æ—Ç ${formatPrice(min)}`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
export const formatSpeed = (speed: string): string => {
  const speedMap: Record<string, string> = {
    '3G': '–¥–æ 7.2 –ú–±–∏—Ç/—Å',
    '4G': '–¥–æ 150 –ú–±–∏—Ç/—Å',
    '5G': '–¥–æ 1 –ì–±–∏—Ç/—Å',
    'LTE': '–¥–æ 150 –ú–±–∏—Ç/—Å'
  };
  return speedMap[speed] || speed;
};

// –†–∞–±–æ—Ç–∞ —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ç–∞—Ä–∏—Ñ–∞
export const getFeatureIcon = (feature: string): string => {
  const iconMap: Record<string, string> = {
    'speed': '‚ö°',
    'coverage': 'üì°',
    'support': 'üìû',
    'activation': 'üîÑ',
    'validity': 'üìÖ',
    'data': 'üìä',
    'roaming': 'üåç',
    'unlimited': '‚àû',
    'wifi': 'üì∂',
    'messaging': 'üí¨',
    'voice': 'üìû',
    'esim': 'üì±',
  };
  return iconMap[feature.toLowerCase()] || 'üì±';
};

// –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
export const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
export const formatTimeLeft = (expiryDate: Date): string => {
  const now = new Date();
  const diff = expiryDate.getTime() - now.getTime();
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  if (days > 30) {
    const months = Math.floor(days / 30);
    return `${months} –º–µ—Å.`;
  }
  if (days > 0) {
    return `${days} –¥–Ω.`;
  }
  return '–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è';
};

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
export const sortByPrice = (a: { price: number }, b: { price: number }): number => {
  return a.price - b.price;
};

export const sortByData = (a: { data: string }, b: { data: string }): number => {
  const getGB = (str: string) => parseFloat(str.split(' ')[0]);
  return getGB(a.data) - getGB(b.data);
};

// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
export const getStatusText = (status: string): string => {
  const statusMap: Record<string, string> = {
    'active': '–ê–∫—Ç–∏–≤–µ–Ω',
    'pending': '–û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
    'expired': '–ò—Å—Ç—ë–∫',
    'cancelled': '–û—Ç–º–µ–Ω—ë–Ω',
    'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
    'failed': '–û—à–∏–±–∫–∞'
  };
  return statusMap[status.toLowerCase()] || status;
};

export const getStatusColor = (status: string): string => {
  const colorMap: Record<string, string> = {
    'active': '#4CAF50',
    'pending': '#FFC107',
    'expired': '#F44336',
    'cancelled': '#9E9E9E',
    'processing': '#2196F3',
    'failed': '#F44336'
  };
  return colorMap[status.toLowerCase()] || '#9E9E9E';
};

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
export const getLoadingText = (action: string): string => {
  const texts: Record<string, string> = {
    'loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
    'processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞...',
    'saving': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...',
    'activating': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è...',
    'connecting': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'
  };
  return texts[action.toLowerCase()] || '–ó–∞–≥—Ä—É–∑–∫–∞...';
};